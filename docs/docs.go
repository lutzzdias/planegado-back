// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/profit/calculate": {
            "post": {
                "description": "Recebe dados de rebanho, ração e venda e retorna o lucro esperado",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profit"
                ],
                "summary": "Calcula o lucro esperado",
                "parameters": [
                    {
                        "description": "Dados de entrada",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ProfitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ExpectedProfit"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.ExpectedProfit": {
            "type": "object",
            "properties": {
                "feed": {
                    "$ref": "#/definitions/entity.Feed"
                },
                "investment": {
                    "$ref": "#/definitions/entity.InitialInvestment"
                },
                "profit": {
                    "type": "number"
                },
                "sale": {
                    "$ref": "#/definitions/entity.Sale"
                }
            }
        },
        "entity.Feed": {
            "type": "object",
            "properties": {
                "expectedGmd": {
                    "type": "number",
                    "example": 1.2
                },
                "percentageAliveWeight": {
                    "type": "number",
                    "example": 2.5
                },
                "priceKg": {
                    "type": "number",
                    "example": 5.5
                },
                "regime": {
                    "$ref": "#/definitions/enums.FeedRegime"
                }
            }
        },
        "entity.Herd": {
            "type": "object",
            "properties": {
                "numberOfAnimals": {
                    "type": "integer",
                    "example": 50
                },
                "priceKg": {
                    "type": "number",
                    "example": 15
                },
                "totalWeight": {
                    "type": "number",
                    "example": 2000.5
                },
                "weightCalculationType": {
                    "description": "0=Média, 1=Total",
                    "enum": [
                        0,
                        1
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.WeightCalculationType"
                        }
                    ],
                    "example": 0
                }
            }
        },
        "entity.InitialInvestment": {
            "type": "object",
            "properties": {
                "avgWeight": {
                    "type": "number",
                    "format": "float64"
                },
                "perHead": {
                    "type": "number",
                    "format": "float64"
                },
                "totalValue": {
                    "type": "number",
                    "format": "float64"
                }
            }
        },
        "entity.ProfitRequest": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer",
                    "example": 30
                },
                "feed": {
                    "$ref": "#/definitions/entity.Feed"
                },
                "herd": {
                    "$ref": "#/definitions/entity.Herd"
                },
                "sale": {
                    "$ref": "#/definitions/entity.Sale"
                }
            }
        },
        "entity.Sale": {
            "type": "object",
            "properties": {
                "calculationType": {
                    "description": "0=Média, 1=Total",
                    "enum": [
                        0,
                        1
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.WeightCalculationType"
                        }
                    ],
                    "example": 0
                },
                "expectedDate": {
                    "type": "string",
                    "example": "2025-09-20T00:00:00Z"
                },
                "finalAvgWeight": {
                    "type": "number",
                    "example": 350
                },
                "priceKg": {
                    "type": "number",
                    "example": 20
                }
            }
        },
        "enums.FeedRegime": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "FeedRegimeOpen",
                "FeedRegimeConfinedSemi"
            ]
        },
        "enums.WeightCalculationType": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "WeightCalculationAverage",
                "WeightCalculationTotal"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Profit API",
	Description:      "API para cálculo de lucro esperado",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
